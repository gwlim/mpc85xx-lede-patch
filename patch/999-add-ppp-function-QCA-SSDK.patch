diff --git a/./target/linux/ar71xx/patches-4.4/999-ppp-function.patch b/./target/linux/ar71xx/patches-4.4/999-ppp-function.patch
new file mode 100644
index 0000000..4c70b2b
--- /dev/null
+++ b/./target/linux/mpc85xx/patches-4.4/999-ppp-function.patch
@@ -0,0 +1,379 @@
+--- a/include/linux/ppp_channel.h.orig	2017-01-20 17:56:50.000000000 +0800
++++ b/include/linux/ppp_channel.h	2017-01-23 23:50:04.463896706 +0800
+@@ -24,6 +24,8 @@
+ #include <linux/poll.h>
+ #include <net/net_namespace.h>
+ 
++typedef void (*ppp_channel_destroy_method_t)(void *, uint16_t, uint8_t *);
++
+ struct ppp_channel;
+ 
+ struct ppp_channel_ops {
+@@ -32,6 +34,18 @@ struct ppp_channel_ops {
+ 	int	(*start_xmit)(struct ppp_channel *, struct sk_buff *);
+ 	/* Handle an ioctl call that has come in via /dev/ppp. */
+ 	int	(*ioctl)(struct ppp_channel *, unsigned int, unsigned long);
++	/* Return the net_device of the given channel. */
++	struct net_device* (*get_netdev)(struct ppp_channel *);
++	/* Register destroy function into PPP channels */
++	bool (*reg_destroy_method)(struct ppp_channel *, ppp_channel_destroy_method_t method, void *);
++	/* Unregister destroy function from PPP channels */
++	void (*unreg_destroy_method)(struct ppp_channel *);
++	/* Get channel protocol type, one of PX_PROTO_XYZ or specific to the channel subtype */
++	int (*get_channel_protocol)(struct ppp_channel *);
++	/* Hold the channel from being destroyed */
++	void (*hold)(struct ppp_channel *);
++	/* Release hold on the channel */
++	void (*release)(struct ppp_channel *);
+ };
+ 
+ struct ppp_channel {
+@@ -46,6 +60,37 @@ struct ppp_channel {
+ };
+ 
+ #ifdef __KERNEL__
++/* Call this to obtain the underlying protocol of the PPP channel, e.g. PX_PROTO_OE */
++extern int ppp_channel_get_protocol(struct ppp_channel *);
++
++/* Call this to hold a channel */
++extern bool ppp_channel_hold(struct ppp_channel *);
++
++/* Call this to release a hold you have upon a channel */
++extern void ppp_channel_release(struct ppp_channel *);
++
++/* Register destroy function into PPP channels */
++extern bool ppp_register_destroy_method(struct net_device *dev, ppp_channel_destroy_method_t method, void *arg);
++
++/* Unregister destroy function from PPP channels */
++extern bool ppp_unregister_destroy_method(struct net_device *dev);
++
++/* Release hold on PPP channels */
++extern void ppp_release_channels(struct ppp_channel *channels[], unsigned int chan_sz);
++
++/* Hold PPP channels for the PPP device */
++extern int ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[], unsigned int chan_sz);
++
++/* Hold PPP channels for the PPP device */
++extern int __ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[], unsigned int chan_sz);
++
++/* Test if the ppp device is a multi-link ppp device */
++extern int ppp_is_multilink(struct net_device *dev);
++
++/* Update statistics of the PPP net_device by incrementing related
++   statistics field value with corresponding parameter */
++extern void ppp_update_stats(struct net_device *dev, unsigned long rx_packets,
++		unsigned long rx_bytes, unsigned long tx_packets, unsigned long tx_bytes);
+ /* Called by the channel when it can send some more data. */
+ extern void ppp_output_wakeup(struct ppp_channel *);
+ 
+--- a/drivers/net/ppp/ppp_generic.c	2017-01-20 17:56:50.000000000 +0800
++++ b/drivers/net/ppp/ppp_generic.c	2017-01-24 00:04:54.287164257 +0800
+@@ -3042,6 +3042,291 @@ static void *unit_find(struct idr *p, in
+ 	return idr_find(p, n);
+ }
+ 
++/*
++ * Registers a destroy method to the channel. When a PPP interface goes down,
++ * this destroy method is called if it is registered.
++ */
++bool ppp_register_destroy_method(struct net_device *dev, ppp_channel_destroy_method_t method, void *arg)
++{
++	struct channel *pch;
++	struct ppp *ppp;
++	struct ppp_net *pn;
++
++	if (!dev) {
++		printk(KERN_NOTICE "net device is null\n");
++		return false;
++	}
++
++	if (dev->type != ARPHRD_PPP) {
++		printk(KERN_NOTICE "net device type is not PPP\n");
++		return false;
++	}
++
++	ppp = netdev_priv(dev);
++	pn = ppp_pernet(ppp->ppp_net);
++
++	spin_lock_bh(&pn->all_channels_lock);
++	list_for_each_entry(pch, &ppp->channels, clist) {
++		if (pch->chan && pch->chan->ops->reg_destroy_method) {
++			if (!pch->chan->ops->reg_destroy_method(pch->chan, method, arg)) {
++				/*
++				 * One of the channels has failed to register the destroy method.
++				 */
++				spin_unlock_bh(&pn->all_channels_lock);
++				printk(KERN_NOTICE "PPP channel %p failed to register destroy method\n", pch->chan);
++				return false;
++			}
++		}
++	}
++	spin_unlock_bh(&pn->all_channels_lock);
++
++	return true;
++}
++
++/*
++ * Unregisters the destroy method from the channel.
++ */
++bool ppp_unregister_destroy_method(struct net_device *dev)
++{
++	struct channel *pch;
++	struct ppp *ppp;
++	struct ppp_net *pn;
++
++	if (!dev) {
++		printk(KERN_NOTICE "net device is null\n");
++		return false;
++	}
++
++	if (dev->type != ARPHRD_PPP) {
++		printk(KERN_NOTICE "net device type is not PPP\n");
++		return false;
++	}
++
++	ppp = netdev_priv(dev);
++
++	pn = ppp_pernet(ppp->ppp_net);
++
++	spin_lock_bh(&pn->all_channels_lock);
++	list_for_each_entry(pch, &ppp->channels, clist) {
++		if (pch->chan && pch->chan->ops->unreg_destroy_method) {
++			/*
++			 * unregister function just sets the fields to NULL, so there is not any failure case.
++			 */
++			pch->chan->ops->unreg_destroy_method(pch->chan);
++		}
++	}
++	spin_unlock_bh(&pn->all_channels_lock);
++
++	return true;
++}
++
++/*
++ * ppp_is_multilink()
++ *	Returns >0 if the device is a multilink PPP netdevice, 0 if not or < 0 if the device is not PPP
++ */
++int ppp_is_multilink(struct net_device *dev)
++{
++	struct ppp *ppp;
++	unsigned int flags;
++
++	if (!dev) {
++		return -1;
++	}
++	if (dev->type != ARPHRD_PPP) {
++		return -1;
++	}
++
++	ppp = netdev_priv(dev);
++	ppp_lock(ppp);
++	flags = ppp->flags;
++	ppp_unlock(ppp);
++	if (flags & SC_MULTILINK) {
++		return 1;
++	}
++	return 0;
++}
++
++/*
++ * ppp_channel_get_protocol()
++ *	Call this to obtain the underlying protocol of the PPP channel, e.g. PX_PROTO_OE
++ *
++ * NOTE: Some channels do not use PX sockets so the protocol value may be very different for them.
++ * NOTE: -1 indicates failure.
++ * NOTE: Once you know the channel protocol you may then either cast 'chan' to its sub-class or
++ * use the channel protocol specific API's as provided by that channel sub type.
++ */
++int ppp_channel_get_protocol(struct ppp_channel *chan)
++{
++	if (!chan->ops->get_channel_protocol) {
++		return -1;
++	}
++	return chan->ops->get_channel_protocol(chan);
++}
++
++/*
++ * ppp_channel_hold()
++ *	Call this to hold a channel.
++ *
++ * Returns true on success or false if the hold could not happen.
++ *
++ * NOTE: chan must be protected against destruction during this call -
++ * either by correct locking etc. or because you already have an implicit
++ * or explicit hold to the channel already and this is an additional hold.
++ */
++bool ppp_channel_hold(struct ppp_channel *chan)
++{
++	if (!chan->ops->hold) {
++		return false;
++	}
++	chan->ops->hold(chan);
++	return true;
++}
++
++/*
++ * ppp_channel_release()
++ *	Call this to release a hold you have upon a channel
++ */
++void ppp_channel_release(struct ppp_channel *chan)
++{
++	chan->ops->release(chan);
++}
++
++/*
++ * ppp_hold_channels()
++ *	Returns the PPP channels of the PPP device, storing each one into channels[].
++ *
++ * channels[] has chan_sz elements.
++ * This function returns the number of channels stored, up to chan_sz.
++ * It will return < 0 if the device is not PPP.
++ *
++ * You MUST release the channels using ppp_release_channels().
++ */
++int ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[], unsigned int chan_sz)
++{
++	struct ppp *ppp;
++	int c;
++	struct channel *pch;
++
++	if (!dev) {
++		return -1;
++	}
++	if (dev->type != ARPHRD_PPP) {
++		return -1;
++	}
++
++	ppp = netdev_priv(dev);
++
++	c = 0;
++	ppp_lock(ppp);
++	list_for_each_entry(pch, &ppp->channels, clist) {
++		struct ppp_channel *chan;
++
++		if (!pch->chan) {
++			/*
++			 * Channel is going / gone away
++			 */
++			continue;
++		}
++		if (c == chan_sz) {
++			/*
++			 * No space to record channel
++			 */
++			ppp_unlock(ppp);
++			return c;
++		}
++
++		/*
++		 * Hold the channel, if supported
++		 */
++		chan = pch->chan;
++		if (!chan->ops->hold) {
++			continue;
++		}
++		chan->ops->hold(chan);
++
++		/*
++		 * Record the channel
++		 */
++		channels[c++] = chan;
++	}
++	ppp_unlock(ppp);
++	return c;
++}
++
++/*
++ * __ppp_hold_channels()
++ *	Returns the PPP channels of the PPP device, storing each
++ *	one into channels[].
++ *
++ * channels[] has chan_sz elements.
++ * This function returns the number of channels stored, up to chan_sz.
++ * It will return < 0 if the device is not PPP.
++ *
++ * You MUST acquire ppp_lock & release the channels using
++ * ppp_release_channels().
++ */
++int __ppp_hold_channels(struct net_device *dev, struct ppp_channel *channels[],
++			unsigned int chan_sz)
++{
++	struct ppp *ppp;
++	int c;
++	struct channel *pch;
++
++	if (!dev)
++		return -1;
++
++	if (dev->type != ARPHRD_PPP)
++		return -1;
++
++	ppp = netdev_priv(dev);
++
++	c = 0;
++	list_for_each_entry(pch, &ppp->channels, clist) {
++		struct ppp_channel *chan;
++
++		if (!pch->chan) {
++			/*
++			 * Channel is going / gone away
++			 */
++			continue;
++		}
++		if (c == chan_sz) {
++			/*
++			 * No space to record channel
++			 */
++			return c;
++		}
++
++		/*
++		 * Hold the channel, if supported
++		 */
++		chan = pch->chan;
++		if (!chan->ops->hold) {
++			continue;
++		}
++		chan->ops->hold(chan);
++
++		/*
++		 * Record the channel
++		 */
++		channels[c++] = chan;
++	}
++	return c;
++}
++
++/*
++ * ppp_release_channels()
++ *	Releases channels
++ */
++void ppp_release_channels(struct ppp_channel *channels[], unsigned int chan_sz)
++{
++	unsigned int c;
++	for (c = 0; c < chan_sz; ++c) {
++		struct ppp_channel *chan;
++		chan = channels[c];
++		chan->ops->release(chan);
++	}
++}
+ /* Module/initialization stuff */
+ 
+ module_init(ppp_init);
+@@ -3058,6 +3343,16 @@ EXPORT_SYMBOL(ppp_input_error);
+ EXPORT_SYMBOL(ppp_output_wakeup);
+ EXPORT_SYMBOL(ppp_register_compressor);
+ EXPORT_SYMBOL(ppp_unregister_compressor);
++EXPORT_SYMBOL(ppp_register_destroy_method);
++EXPORT_SYMBOL(ppp_unregister_destroy_method);
++EXPORT_SYMBOL(ppp_is_multilink);
++EXPORT_SYMBOL(ppp_hold_channels);
++EXPORT_SYMBOL(__ppp_hold_channels);
++EXPORT_SYMBOL(ppp_release_channels);
++EXPORT_SYMBOL(ppp_channel_get_protocol);
++EXPORT_SYMBOL(ppp_channel_hold);
++EXPORT_SYMBOL(ppp_channel_release);
++
+ MODULE_LICENSE("GPL");
+ MODULE_ALIAS_CHARDEV(PPP_MAJOR, 0);
+ MODULE_ALIAS("devname:ppp");
